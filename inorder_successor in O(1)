/*
Given a BST, and a reference to a Node x in the BST. Find the Inorder Successor of the given node in the BST.
 

Example 1:

Input:
      2
    /   \
   1     3
K(data of x) = 2
Output: 3 
Explanation: 
Inorder traversal : 1 2 3 
Hence, inorder successor of 2 is 3.


Example 2:

Input:
             20
            /   \
           8     22
          / \
         4   12
            /  \
           10   14
K(data of x) = 8
Output: 10
Explanation:
Inorder traversal: 4 8 10 12 14 20 22
Hence, successor of 8 is 10.

 

Your Task:
You don't need to read input or print anything. Your task is to complete the function inOrderSuccessor(). This function takes the root node and the reference node as argument and returns the node that is inOrder successor of the reference node. If there is no successor, return null value.


Expected Time Complexity: O(Height of the BST).
Expected Auxiliary Space: O(1).


Constraints:
1 <= N <= 1000, where N is number of nodes
*/

//code goes here 

Node * inOrderSuccessor(Node *root, Node *x)
{
    //Your code here

Node *successor=NULL;//we define initially successor as NULL

while(root!=NULL)  //if root is NULL that means either we have our least difference successor or we don't have it at all and we return NULL
{
    
    if(root->data > x->data && root->data!=x->data) //if root's value is greater than x value 
    successor=root;
   if(root->data > x->data) // if root's value is greater than x we neded to look for better options as it can be succesoor
   {
       root=root->left;
   }
   else if(root->data <= x->data) //if root's value is less than x then we get to look into value greater than x by traversing right
   {
       root=root->right;
   }
    
}

return successor;
}

//recursion approach


/**
 * class Tree {
 *     public:
 *         int val;
 *         Tree *left;
 *         Tree *right;
 * };
 */
int solve(Tree* root, int t) {
    if(root==NULL)
    {
        return 1e9+7;
    }
    if(root->val > t)
    {
        return min(root->val,solve(root->left,t)); //finding better option and taking minimum of them
    }
    else
    return solve(root->right,t);
}
